version: "3.8"
services:
  product-management:
    build:
      context: ./product-management
    container_name: product-management
    ports:
      - "8080:8080"
    environment:
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
      RABBITMQ_ROUTING_KEY: ${RABBITMQ_ROUTING_KEY} 
    depends_on:
      - rabbitmq

  product-service:
    build:
      context: ./product-service
    container_name: product-service
    ports:
      - "8081:8081"
    environment:
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
      RABBITMQ_ROUTING_KEY: ${RABBITMQ_ROUTING_KEY} 
    depends_on:
      - db
      - rabbitmq
  db:
    build:
      context: .
      dockerfile: Dockerfile-postgres
    container_name: postgres-container
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  rabbitmq:
    build:
      context: .
      dockerfile: Dockerfile-rabbitmq
    container_name: rabbitmq-container
    ports:
      - "5672:5672"
      - "15672:15672"

volumes:
  postgres_data:
